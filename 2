using System;

public class RightTriangle
{
    /// Длина первого катета
    public double CathetusA { get; }  // Свойство только для чтения - защита от изменений после создания
    /// Длина второго катета
    public double CathetusB { get; }  // Аналогично первому катету

    // Основной конструктор класса
    public RightTriangle(double a, double b)
    {
        // Валидация входных параметров
        if (a <= 0 || b <= 0)
        {
            throw new ArgumentException("Катеты должны быть положительными!");  // Защита от некорректных данных
        }

        CathetusA = a;  // Инициализация свойства после проверки
        CathetusB = b;
    }

    // Перегрузка оператора true - определяет, когда треугольник считается "истинным" (валидным)
    public static bool operator true(RightTriangle triangle)
    {
        return triangle.CathetusA > 0 && triangle.CathetusB > 0;  // Оба катета должны быть положительными
    }

    // Перегрузка оператора false - обратная логика оператору true
    public static bool operator false(RightTriangle triangle)
    {
        return triangle.CathetusA <= 0 || triangle.CathetusB <= 0;  // Хотя бы один катет неположительный
    }

    // Неявное преобразование в double - позволяет использовать треугольник как число (площадь)
    public static implicit operator double(RightTriangle triangle)
    {
        return triangle.CathetusA * triangle.CathetusB / 2;  // Формула площади прямоугольного треугольника
    }

    // Переопределение стандартного метода для строкового представления объекта
    public override string ToString()
    {
        return $"Прямоугольный треугольник с катетами {CathetusA} и {CathetusB}";  // Информационная строка
    }
}

class Program
{
    // Метод для безопасного ввода положительного числа
    private static double ReadPositiveDouble(string prompt)
    {
        double value;
        do
        {
            Console.Write(prompt);  // Вывод приглашения для ввода
        }
        while (!double.TryParse(Console.ReadLine(), out value) || value <= 0);  // Цикл, пока не введено корректное число

        return value;  // Возврат проверенного значения
    }

    // Точка входа в программу
    static void Main()
    {
        try  // Обработка возможных исключений
        {
            Console.WriteLine("Введите параметры прямоугольного треугольника:");

            // Ввод длин катетов с проверкой
            double a = ReadPositiveDouble("Длина первого катета: ");
            double b = ReadPositiveDouble("Длина второго катета: ");

            // Создание экземпляра треугольника
            RightTriangle triangle = new RightTriangle(a, b);

            // Вывод информации о треугольнике
            Console.WriteLine($"\n{triangle}");
            Console.WriteLine($"Площадь треугольника: {(double)triangle}");  // Использование неявного преобразования

            // Проверка валидности через перегруженные операторы
            if (triangle)
            {
                Console.WriteLine("Треугольник валиден");
            }
            else
            {
                Console.WriteLine("Треугольник невалиден");  // В текущей реализации сюда попасть невозможно
            }
        }
        catch (Exception ex)  // Обработка всех исключений
        {
            Console.WriteLine($"Ошибка: {ex.Message}");  // Вывод сообщения об ошибке
        }

        // Завершение программы
        Console.WriteLine("\nНажмите любую клавишу для выхода...");
        Console.ReadKey();  // Ожидание действия пользователя
    }
}
