using System;

public class RightTriangle
{
    public double A { get; }  // Первый катет
    public double B { get; }  // Второй катет

    public RightTriangle(double a, double b)
    {
        if (a <= 0 || b <= 0)
            throw new ArgumentException("Катеты должны быть положительными!");

        A = a;
        B = b;
    }

    // Перегрузка оператора true/false для проверки треугоьника
    public static bool operator true(RightTriangle t) => t.A > 0 && t.B > 0;
    public static bool operator false(RightTriangle t) => t.A <= 0 || t.B <= 0;

    // Неявное преобразование в double (возвращает площадь)
    public static implicit operator double(RightTriangle t) => t.A * t.B / 2;

    // Метод для вывода информации
    public override string ToString() => $"Прямоугольный треугольник с катетами {A} и {B}";
}

class Program
{
    static double ReadPositiveDouble(string prompt)
    {
        double value;
        do
        {
            Console.Write(prompt);
        }
        while (!double.TryParse(Console.ReadLine(), out value) || value <= 0);

        return value;
    }

    static void Main()
    {
        try
        {
            Console.WriteLine("Введите параметры прямоугольного треугольника:");
            double a = ReadPositiveDouble("Длина первого катета: ");
            double b = ReadPositiveDouble("Длина второго катета: ");

            RightTriangle triangle = new RightTriangle(a, b);

            Console.WriteLine($"\n{triangle}");
            Console.WriteLine($"Площадь треугольника: {(double)triangle}");

            if (triangle)
                Console.WriteLine("Треугольник валиден");
            else
                Console.WriteLine("Треугольник невалиден");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка: {ex.Message}");
        }

        Console.WriteLine("\nНажмите любую клавишу для выхода...");
        Console.ReadKey();
    }
}
